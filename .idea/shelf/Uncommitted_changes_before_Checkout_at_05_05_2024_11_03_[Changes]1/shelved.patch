Index: src/main/java/Controller/CountryController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Controller;\r\n\r\nimport Entities.Country;\r\nimport Services.ServiceCountry;\r\nimport javafx.beans.property.SimpleBooleanProperty;\r\nimport javafx.beans.property.SimpleStringProperty;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.Parent;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.layout.AnchorPane;\r\nimport javafx.scene.layout.Pane;\r\n\r\nimport java.io.IOException;\r\nimport java.net.URL;\r\nimport java.sql.SQLException;\r\nimport java.util.List;\r\nimport java.net.HttpURLConnection;\r\n\r\npublic class CountryController {\r\n\r\n    public Button clearButton1;\r\n    @FXML\r\n    private TableView<Country> DisplayCountries;\r\n\r\n    @FXML\r\n    private TableColumn<Country, Integer> idColumn;\r\n\r\n    @FXML\r\n    private TableColumn<Country, String> nameColumn;\r\n\r\n    @FXML\r\n    private TableColumn<Country, String> regionColumn;\r\n\r\n    @FXML\r\n    private TableColumn<Country, Boolean> visaRequiredColumn;\r\n\r\n//    @FXML\r\n  //  private TextField idField;\r\n\r\n    @FXML\r\n    private TextField nameField;\r\n\r\n    @FXML\r\n    private ComboBox<String> regionComboBox;\r\n\r\n    @FXML\r\n    private CheckBox visaRequiredCheckbox;\r\n\r\n    @FXML\r\n    private Button addButton;\r\n\r\n    @FXML\r\n    private Button deleteButton;\r\n\r\n    @FXML\r\n    private Button updateButton;\r\n\r\n    private ServiceCountry serviceCountry;\r\n\r\n    @FXML\r\n    void initialize() {\r\n\r\n        serviceCountry = new ServiceCountry();\r\n       // idColumn.setCellValueFactory(cellData -> new SimpleIntegerProperty(cellData.getValue().getId()).asObject());\r\n        nameColumn.setCellValueFactory(cellData -> new SimpleStringProperty(cellData.getValue().getName()));\r\n        regionColumn.setCellValueFactory(cellData -> new SimpleStringProperty(cellData.getValue().getRegion()));\r\n\r\n        // Modify visaRequiredColumn's CellValueFactory to display \"Yes\" or \"No\"\r\n        // Modify visaRequiredColumn's CellValueFactory to display \"Yes\" or \"No\"\r\n        visaRequiredColumn.setCellValueFactory(cellData -> {\r\n            boolean visaRequired = cellData.getValue().isVisa_required();\r\n            return new SimpleBooleanProperty(visaRequired);\r\n        });\r\n\r\n        // Optionally, you can set a custom cell factory to style the cell if you want\r\n        visaRequiredColumn.setCellFactory(column -> new TableCell<Country, Boolean>() {\r\n            @Override\r\n            protected void updateItem(Boolean item, boolean empty) {\r\n                super.updateItem(item, empty);\r\n                if (empty || item == null) {\r\n                    setText(null);\r\n                    setStyle(\"\");\r\n                } else {\r\n                    setText(item ? \"Yes\" : \"No\");\r\n                    // Optionally, you can add styles to the cell based on the value\r\n                }\r\n            }\r\n        });\r\n\r\n        addButton.setOnAction(event -> addCountry());\r\n        deleteButton.setOnAction(event -> deleteCountry());\r\n        updateButton.setOnAction(event -> updateCountry());\r\n\r\n        // Populate region ComboBox with continents\r\n        regionComboBox.getItems().addAll(\r\n                \"Africa\", \"Antarctica\", \"Asia\", \"Europe\", \"North America\", \"Oceania\", \"South America\"\r\n        );\r\n\r\n        // Load countries into the table\r\n        try {\r\n            List<Country> listCountries = serviceCountry.Read();\r\n            DisplayCountries.getItems().addAll(listCountries);\r\n        } catch (SQLException e) {\r\n            showAlert(Alert.AlertType.ERROR, \"Database Error\", \"Failed to fetch countries from the database.\");\r\n        }\r\n\r\n        // Add listener to handle row selection\r\n        DisplayCountries.getSelectionModel().selectedItemProperty().addListener((obs, oldSelection, newSelection) -> {\r\n            if (newSelection != null) {\r\n                // Populate fields with selected country's data\r\n               // idField.setText(String.valueOf(newSelection.getId()));\r\n                nameField.setText(newSelection.getName());\r\n                regionComboBox.setValue(newSelection.getRegion());\r\n                visaRequiredCheckbox.setSelected(newSelection.isVisa_required());\r\n            }\r\n        });\r\n    }\r\n    private boolean validateCountryName(String name) {\r\n        HttpURLConnection connection = null;\r\n        try {\r\n            URL url = new URL(\"https://restcountries.com/v3.1/name/\" + name + \"?fullText=true\");\r\n            connection = (HttpURLConnection) url.openConnection();\r\n            connection.setRequestMethod(\"GET\");\r\n            return connection.getResponseCode() == 200;\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n            return false;\r\n        } finally {\r\n            if (connection != null) {\r\n                connection.disconnect();\r\n            }\r\n        }\r\n    }\r\n\r\n    @FXML\r\n    void addCountry() {\r\n        try {\r\n            String name = nameField.getText();\r\n            String region = regionComboBox.getValue();\r\n            boolean visaRequired = visaRequiredCheckbox.isSelected();\r\n\r\n            // Validate fields\r\n            if (name.isEmpty() || region == null) {\r\n                showAlert(Alert.AlertType.ERROR, \"Required fields\", \"Please fill in all mandatory fields.\");\r\n                return;\r\n            }\r\n\r\n            // Validate country name (no numbers)\r\n            if (name.matches(\".*\\\\d+.*\")) {\r\n                showAlert(Alert.AlertType.ERROR, \"Invalid name\", \"Country name should not contain numbers.\");\r\n                return;\r\n            }\r\n\r\n            // Validate against a list of real countries\r\n            if (!validateCountryName(name)) {\r\n                showAlert(Alert.AlertType.ERROR, \"Invalid Country\", \"The country name is not recognized.\");\r\n                return;\r\n            }\r\n\r\n            // Create country object\r\n            Country country = new Country(name, region, visaRequired);\r\n\r\n            // Add country to database\r\n            serviceCountry.add(country);\r\n\r\n            // Update TableView\r\n            DisplayCountries.getItems().add(country);\r\n\r\n            // Show success message\r\n            showAlert(Alert.AlertType.INFORMATION, \"Success\", \"Country added successfully!\");\r\n        } catch (NumberFormatException e) {\r\n            showAlert(Alert.AlertType.ERROR, \"Invalid input\", \"Please enter a valid ID.\");\r\n        } catch (SQLException e) {\r\n            showAlert(Alert.AlertType.ERROR, \"Database Error\", \"Error adding country to the database.\");\r\n        }\r\n    }\r\n    @FXML\r\n    void deleteCountry() {\r\n        Country selectedCountry = DisplayCountries.getSelectionModel().getSelectedItem();\r\n        if (selectedCountry != null) {\r\n            try {\r\n                serviceCountry.delete(selectedCountry);\r\n                DisplayCountries.getItems().remove(selectedCountry);\r\n                showAlert(Alert.AlertType.INFORMATION, \"Success\", \"Country deleted successfully!\");\r\n            } catch (SQLException e) {\r\n                showAlert(Alert.AlertType.ERROR, \"Database Error\", \"Error deleting country from the database.\");\r\n            }\r\n        } else {\r\n            showAlert(Alert.AlertType.WARNING, \"Selection Error\", \"Please select a country to delete.\");\r\n        }\r\n    }\r\n    @FXML\r\n    void updateCountry() {\r\n        Country selectedCountry = DisplayCountries.getSelectionModel().getSelectedItem();\r\n        if (selectedCountry != null) {\r\n            try {\r\n              //  int id = Integer.parseInt(idField.getText());\r\n                String name = nameField.getText();\r\n                String region = regionComboBox.getValue();\r\n                boolean visaRequired = visaRequiredCheckbox.isSelected();\r\n\r\n                // Validate fields\r\n                if (name.isEmpty() || region == null) {\r\n                    showAlert(Alert.AlertType.ERROR, \"Required fields\", \"Please fill in all mandatory fields.\");\r\n                    return;\r\n                }\r\n\r\n                // Validate country name (no numbers)\r\n                if (name.matches(\".*\\\\d+.*\")) {\r\n                    showAlert(Alert.AlertType.ERROR, \"Invalid name\", \"Country name should not contain numbers.\");\r\n                    return;\r\n                }\r\n\r\n                // Update selected country object\r\n              //  selectedCountry.setId(id);\r\n                selectedCountry.setName(name);\r\n                selectedCountry.setRegion(region);\r\n                selectedCountry.setVisa_required(visaRequired);\r\n\r\n                // Update country in the database\r\n                serviceCountry.update(selectedCountry);\r\n\r\n                // Refresh TableView\r\n                DisplayCountries.refresh();\r\n\r\n                // Show success message\r\n                showAlert(Alert.AlertType.INFORMATION, \"Success\", \"Country updated successfully!\");\r\n\r\n            } catch (SQLException e) {\r\n                showAlert(Alert.AlertType.ERROR, \"Database Error\", \"Error updating country in the database.\");\r\n            }\r\n        } else {\r\n            showAlert(Alert.AlertType.WARNING, \"Selection Error\", \"Please select a country to update.\");\r\n        }\r\n    }\r\n    private void showAlert(Alert.AlertType type, String title, String message) {\r\n        Alert alert = new Alert(type);\r\n        alert.setTitle(title);\r\n        alert.setContentText(message);\r\n        alert.showAndWait();\r\n    }\r\n\r\n\r\n\r\n    @FXML\r\n    public void goToMonument(ActionEvent event) {\r\n        URL url = getClass().getResource(\"/com/test/tjv2/Monument.fxml\");\r\n        if (url == null) {\r\n            System.err.println(\"Cannot find Monument.fxml\");\r\n        } else {\r\n            try {\r\n                Parent root = FXMLLoader.load(url);\r\n                // Get the current scene and set the root\r\n                Scene scene = addButton.getScene(); // You can use any control present in the scene\r\n                scene.setRoot(root);\r\n            } catch (IOException ex) {\r\n                ex.printStackTrace(); // This prints the stack trace to help diagnose the issue\r\n            }\r\n        }\r\n    }\r\n\r\n    @FXML\r\n    public void goToCountry(ActionEvent event) {\r\n        URL url = getClass().getResource(\"/com/test/tjv2/Country.fxml\");\r\n        if (url == null) {\r\n            System.err.println(\"Cannot find Country.fxml\");\r\n        } else {\r\n            try {\r\n                Parent root = FXMLLoader.load(url);\r\n                // Get the current scene and set the root\r\n                Scene scene = addButton.getScene(); // You can use any control present in the scene\r\n                scene.setRoot(root);\r\n            } catch (IOException ex) {\r\n                ex.printStackTrace(); // This prints the stack trace to help diagnose the issue\r\n            }\r\n        }\r\n    }\r\n    private void clearFields() {\r\n        nameField.clear();\r\n        visaRequiredCheckbox.setSelected(false);\r\n    }\r\n    public void Clearc(ActionEvent actionEvent) {\r\n        clearFields();;\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Controller/CountryController.java b/src/main/java/Controller/CountryController.java
--- a/src/main/java/Controller/CountryController.java	
+++ b/src/main/java/Controller/CountryController.java	
@@ -148,9 +148,9 @@
                 return;
             }
 
-            // Validate country name (no numbers)
-            if (name.matches(".*\\d+.*")) {
-                showAlert(Alert.AlertType.ERROR, "Invalid name", "Country name should not contain numbers.");
+            // Validate country name (no numbers and starts with a capital letter)
+            if (!name.matches("[A-Z].*")) {
+                showAlert(Alert.AlertType.ERROR, "Invalid name", "Country name should start with a capital letter.");
                 return;
             }
 
@@ -177,6 +177,7 @@
             showAlert(Alert.AlertType.ERROR, "Database Error", "Error adding country to the database.");
         }
     }
+
     @FXML
     void deleteCountry() {
         Country selectedCountry = DisplayCountries.getSelectionModel().getSelectedItem();
Index: src/main/java/Controller/MonumentController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Controller;\r\n\r\nimport Entities.Country;\r\nimport Entities.Monument;\r\nimport Services.ServiceCountry;\r\nimport Services.ServiceMonument;\r\nimport javafx.beans.property.SimpleBooleanProperty;\r\nimport javafx.beans.property.SimpleStringProperty;\r\nimport javafx.collections.FXCollections;\r\nimport javafx.collections.ObservableList;\r\nimport javafx.collections.transformation.FilteredList;\r\nimport javafx.collections.transformation.SortedList;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.Node;\r\nimport javafx.scene.Parent;\r\nimport javafx.scene.chart.CategoryAxis;\r\nimport javafx.scene.chart.NumberAxis;\r\nimport javafx.scene.chart.StackedBarChart;\r\nimport javafx.scene.chart.XYChart;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.control.cell.PropertyValueFactory;\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.image.ImageView;\r\nimport javafx.scene.layout.AnchorPane;\r\nimport javafx.scene.layout.Pane;\r\nimport javafx.stage.FileChooser;\r\nimport Services.WikipediaAPI;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.net.HttpURLConnection;\r\nimport java.net.MalformedURLException;\r\nimport java.net.URL;\r\nimport java.sql.SQLException;\r\nimport java.util.*;\r\nimport java.util.concurrent.atomic.AtomicInteger;\r\n\r\npublic class MonumentController {\r\n\r\n    public Button SelectImageMonumentButton;\r\n\r\n    public TextField searchField;\r\n    public Button clearButton1;\r\n    public ComboBox regionComboBox;\r\n    public CheckBox visaRequiredCheckbox;\r\n\r\n    public TableView DisplayCountries;\r\n    public TableColumn nameColumn1;\r\n    public TableColumn regionColumn;\r\n    public TableColumn visaRequiredColumn;\r\n    public TextField CountrynameField;\r\n    public TextField MonumentnameField;\r\n    @FXML\r\n    private Button addButton;\r\n\r\n\r\n\r\n\r\n\r\n    @FXML\r\n    private ComboBox<String> countryComboBox;\r\n\r\n\r\n\r\n    @FXML\r\n    private ComboBox<String> typeComboBox;\r\n\r\n    @FXML\r\n    private TextField entryPriceField;\r\n\r\n    @FXML\r\n    private ComboBox<String> statusComboBox;\r\n\r\n    @FXML\r\n    private TextArea descriptionField;\r\n\r\n    @FXML\r\n    private TextField latitudeField;\r\n\r\n    @FXML\r\n    private TextField longitudeField;\r\n\r\n    @FXML\r\n    private TableView<Monument> displayMonuments;\r\n\r\n\r\n\r\n    @FXML\r\n    private TableColumn<Monument, String> countryColumn;\r\n\r\n    @FXML\r\n    private TableColumn<Monument, String> nameColumn;\r\n\r\n    @FXML\r\n    private TableColumn<Monument, String> typeColumn;\r\n\r\n    @FXML\r\n    private TableColumn<Monument, Integer> entryPriceColumn;\r\n\r\n    @FXML\r\n    private TableColumn<Monument, String> statusColumn;\r\n\r\n    @FXML\r\n    private TableColumn<Monument, String> descriptionColumn;\r\n\r\n    @FXML\r\n    private TableColumn<Monument, Integer> latitudeColumn;\r\n\r\n    @FXML\r\n    private TableColumn<Monument, Integer> longitudeColumn;\r\n\r\n    @FXML\r\n    private Button selectImageMonumentButton;\r\n\r\n    @FXML\r\n    private ImageView imageViewMonument;\r\n    private ObservableList<Monument> masterData = FXCollections.observableArrayList();\r\n\r\n\r\n    private String imagePath = \"images/image.png\"; // Default image path\r\n    @FXML\r\n    private StackedBarChart<String, Number> monumentChart;\r\n    @FXML\r\n    private CategoryAxis xAxis;\r\n    @FXML\r\n    private NumberAxis yAxis;\r\n    private ServiceMonument serviceMonument;\r\n    private ServiceCountry serviceCountry;\r\n\r\n    public MonumentController() {\r\n        this.serviceMonument = new ServiceMonument();\r\n        this.serviceCountry = new ServiceCountry();\r\n    }\r\n    private void loadDefaultImage() {\r\n        try {\r\n            String defaultImagePath = \"/images/image.png\";  // Corrected path assuming your images folder is directly under resources\r\n            URL imageURL = getClass().getResource(defaultImagePath);\r\n            if (imageURL != null) {\r\n                Image defaultImage = new Image(imageURL.toExternalForm());\r\n                imageViewMonument.setImage(defaultImage);\r\n            } else {\r\n                System.out.println(\"Default image not found: \" + defaultImagePath);\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n\r\n    private void loadMonumentStatsToChart() throws SQLException {\r\n        // Set chart title\r\n        monumentChart.setTitle(\"Statistics of Monuments per Country\");\r\n        monumentChart.setLegendVisible(false);\r\n\r\n        // Clear existing chart data\r\n        monumentChart.getData().clear();\r\n\r\n        // Fetch monument statistics and update chart data\r\n        Map<String, Integer> stats = serviceMonument.getMonumentCountByCountry();\r\n        XYChart.Series<String, Number> series = new XYChart.Series<>();\r\n        final AtomicInteger countryIndex = new AtomicInteger(1);\r\n\r\n        // Determine the maximum count value for setting the upper bound of the y-axis\r\n        int maxCount = Collections.max(stats.values());\r\n\r\n        stats.forEach((country, count) -> {\r\n            XYChart.Data<String, Number> data = new XYChart.Data<>(country, count);\r\n            data.nodeProperty().addListener((observable, oldNode, newNode) -> {\r\n                if (newNode != null) {\r\n                    // Assign a unique style class based on country index\r\n                    newNode.getStyleClass().add(\"chart-bar-\" + countryIndex.getAndIncrement());\r\n                }\r\n            });\r\n            series.getData().add(data);\r\n        });\r\n\r\n        monumentChart.getData().add(series);\r\n\r\n        // Configure Y-axis to have ticks representing only whole numbers\r\n        yAxis.setAutoRanging(false); // Disable auto-ranging\r\n        yAxis.setLowerBound(0); // Explicitly set the lower bound\r\n        yAxis.setUpperBound(maxCount + 1); // Set the upper bound based on the max count\r\n        yAxis.setTickUnit(1); // Set the tick unit to 1\r\n        yAxis.setMinorTickCount(0); // Remove minor tick counts\r\n        yAxis.setForceZeroInRange(true);\r\n\r\n        // Apply styles and layout the chart to reflect the changes\r\n        monumentChart.applyCss();\r\n        monumentChart.layout();\r\n\r\n        // Apply custom coloring after the chart data is updated (if you have this method)\r\n        applyCustomColoring(stats.size());\r\n    }\r\n\r\n    private void applyCustomColoring(int numberOfCountries) {\r\n        monumentChart.applyCss();\r\n        monumentChart.layout();\r\n\r\n        int colorIndex = 1; // Start from 1 to match CSS classes\r\n\r\n        for (XYChart.Series<String, Number> series : monumentChart.getData()) {\r\n            int dataCount = series.getData().size();\r\n            for (int i = 0; i < dataCount; i++) {\r\n                XYChart.Data<String, Number> data = series.getData().get(i);\r\n                Node node = data.getNode();\r\n                if (node != null) {\r\n                    int styleIndex = (i % 6) + 1; // This ensures a cycle through 1 to 6\r\n                    String styleClass = \"chart-bar-\" + styleIndex;\r\n                    node.getStyleClass().add(styleClass);\r\n                  //  System.out.println(\"Applied style: \" + node.getStyleClass()); // Debugging line\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    private void setupColumnBindings() {\r\n       // idColumn.setCellValueFactory(new PropertyValueFactory<>(\"id\"));\r\n        countryColumn.setCellValueFactory(cellData -> {\r\n            Monument monument = cellData.getValue();\r\n            Country country = monument.getCountry();\r\n            if (country != null) {\r\n                return new SimpleStringProperty(country.getName());\r\n            } else {\r\n                return new SimpleStringProperty(\"\");\r\n            }\r\n        });\r\n        nameColumn.setCellValueFactory(new PropertyValueFactory<>(\"name\"));\r\n        typeColumn.setCellValueFactory(new PropertyValueFactory<>(\"type\"));\r\n        entryPriceColumn.setCellValueFactory(new PropertyValueFactory<>(\"entryPrice\"));\r\n        statusColumn.setCellValueFactory(new PropertyValueFactory<>(\"status\"));\r\n        descriptionColumn.setCellValueFactory(new PropertyValueFactory<>(\"description\"));\r\n        latitudeColumn.setCellValueFactory(new PropertyValueFactory<>(\"latitude\"));\r\n        longitudeColumn.setCellValueFactory(new PropertyValueFactory<>(\"longitude\"));\r\n\r\n    }\r\n    private void loadData() {\r\n        masterData = FXCollections.observableArrayList();  // Initialize masterData list\r\n        try {\r\n            List<Monument> monuments = serviceMonument.Read();\r\n\r\n            masterData.addAll(monuments);\r\n        } catch (SQLException e) {\r\n            showAlert(Alert.AlertType.ERROR, \"Database Error\", \"Failed to fetch Monuments from the database.\");\r\n        }\r\n    }\r\n    @FXML\r\n    public void initialize() throws SQLException {\r\n        // Initialize services\r\n        serviceMonument = new ServiceMonument();\r\n        serviceCountry = new ServiceCountry();\r\n\r\n        // Load default image for monuments\r\n        loadDefaultImage();\r\n\r\n        // Setup column bindings for both monuments and countries\r\n        setupColumnBindings();\r\n\r\n        // Populate ComboBoxes and load data\r\n        populateCountryComboBox();\r\n        loadData();  // Loads monument data\r\n\r\n        // Setup search filters and listeners\r\n        setupSearchFilter();\r\n        setupMonumentTableListeners();\r\n\r\n        // Chart loading for monuments\r\n        try {\r\n            loadMonumentStatsToChart();\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        // Setup actions for buttons (monuments and countries)\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    private void setupMonumentTableListeners() {\r\n        displayMonuments.getSelectionModel().selectedItemProperty().addListener((obs, oldSelection, newSelection) -> {\r\n            updateFormFields(newSelection);\r\n        });\r\n    }\r\n\r\n\r\n    private WikipediaAPI wikipediaService = new WikipediaAPI();\r\n\r\n    private void updateFormFields(Monument monument) {\r\n        if (monument != null) {\r\n            countryComboBox.setValue(monument.getCountry().getName());\r\n            MonumentnameField.setText(monument.getName());\r\n            typeComboBox.setValue(monument.getType());\r\n            entryPriceField.setText(String.valueOf(monument.getEntryPrice()));\r\n            statusComboBox.setValue(monument.getStatus());\r\n            latitudeField.setText(String.valueOf(monument.getLatitude()));\r\n            longitudeField.setText(String.valueOf(monument.getLongitude()));\r\n\r\n            // Fetch and update the description asynchronously\r\n            String description = wikipediaService.getMonumentDescription(monument.getName().replace(\" \", \"_\"));\r\n            descriptionField.setText(description);\r\n\r\n            // Set image if exists\r\n            try {\r\n                String imagePath = monument.getImagePath();\r\n                if (imagePath != null && !imagePath.isEmpty()) {\r\n                    imageViewMonument.setImage(new Image(imagePath));\r\n                } else {\r\n                    loadDefaultImage();\r\n                }\r\n            } catch (Exception e) {\r\n                System.err.println(\"Error setting image: \" + e.getMessage());\r\n                loadDefaultImage();\r\n            }\r\n        } else {\r\n            clearFields();\r\n        }\r\n    }\r\n\r\n    @FXML\r\n    public void fetchDescription() {\r\n        String query = MonumentnameField.getText().trim().replace(\" \", \"_\");\r\n        String description = wikipediaService.getMonumentDescription(query);\r\n        descriptionField.setText(description);\r\n    }\r\n\r\n\r\n\r\n    private void setupSearchFilter() {\r\n        FilteredList<Monument> filteredData = new FilteredList<>(masterData, p -> true);\r\n        searchField.textProperty().addListener((observable, oldValue, newValue) -> {\r\n            filteredData.setPredicate(monument -> {\r\n                if (newValue == null || newValue.isEmpty()) {\r\n                    return true;\r\n                }\r\n                String lowerCaseFilter = newValue.toLowerCase();\r\n                return monument.getName().toLowerCase().contains(lowerCaseFilter) ||\r\n                        monument.getType().toLowerCase().contains(lowerCaseFilter) ;\r\n            });\r\n        });\r\n        SortedList<Monument> sortedData = new SortedList<>(filteredData);\r\n        sortedData.comparatorProperty().bind(displayMonuments.comparatorProperty());\r\n        displayMonuments.setItems(sortedData);\r\n    }\r\n    @FXML\r\n    void selectImageMonument() {\r\n        FileChooser fileChooser = new FileChooser();\r\n        fileChooser.setTitle(\"Select Image\");\r\n\r\n        // Filter files to show only images\r\n        fileChooser.getExtensionFilters().addAll(\r\n                new FileChooser.ExtensionFilter(\"Images\", \"*.png\", \"*.jpg\", \"*.gif\")\r\n        );\r\n\r\n        // Show file dialog\r\n        File selectedFile = fileChooser.showOpenDialog(null);\r\n\r\n        // Check if a file is selected\r\n        if (selectedFile != null) {\r\n            // Get the path to the selected image\r\n            imagePath = selectedFile.toURI().toString();\r\n\r\n            // Load the image into the ImageView\r\n            try {\r\n                Image image = new Image(imagePath);\r\n                imageViewMonument.setImage(image);\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n                showAlert(Alert.AlertType.ERROR, \"Error\", \"Error loading image\", \"Failed to load the selected image.\");\r\n            }\r\n        }\r\n    }\r\n\r\n    private void showAlert(Alert.AlertType type, String title, String header, String content) {\r\n        Alert alert = new Alert(type);\r\n        alert.setTitle(title);\r\n        alert.setHeaderText(header);\r\n        alert.setContentText(content);\r\n        alert.showAndWait();\r\n    }\r\n\r\n\r\n    private void populateCountryComboBox() throws SQLException {\r\n        List<Country> countries = serviceCountry.Read();\r\n        List<String> countryNames = new ArrayList<>();\r\n        for (Country country : countries) {\r\n            countryNames.add(country.getName());\r\n        }\r\n        ObservableList<String> countryList = FXCollections.observableArrayList(countryNames);\r\n        countryComboBox.setItems(countryList);\r\n    }\r\n\r\n\r\n\r\n    @FXML\r\n    public void addMonument() {\r\n        try {\r\n            // Validation for adding a monument\r\n            if (!validateInput()) {\r\n                return;\r\n            }\r\n\r\n            String selectedCountryName = countryComboBox.getValue(); // Get the selected country name\r\n            Country selectedCountry = serviceCountry.getCountryByName(selectedCountryName);\r\n            if (selectedCountry == null) {\r\n                showAlert(Alert.AlertType.ERROR, \"Selection Error\", \"Selected country is not available.\");\r\n                return;\r\n            }\r\n\r\n            // Gather all inputs\r\n            String name = MonumentnameField.getText();\r\n            String type = typeComboBox.getValue();\r\n            String status = statusComboBox.getValue();\r\n            String description = descriptionField.getText();\r\n            String selectedImagePath = imagePath;\r\n            int entryPrice = Integer.parseInt(entryPriceField.getText());\r\n            double latitude = Double.parseDouble(latitudeField.getText());\r\n            double longitude = Double.parseDouble(longitudeField.getText());\r\n\r\n            // Create a new Monument object\r\n            Monument monument = new Monument(selectedCountry, name, type, entryPrice, status, description, latitude, longitude, selectedImagePath);\r\n\r\n            // Add the monument to the ObservableList for UI\r\n            masterData.add(monument);\r\n\r\n            // Attempt to add the monument to the database\r\n            serviceMonument.add(monument);\r\n\r\n            // UI cleanup and refresh after successful addition\r\n            clearFields();\r\n            showAlert(Alert.AlertType.INFORMATION, \"Success\", \"Monument added successfully!\");\r\n            searchField.setText(\"\");\r\n            displayMonuments.setItems(null);\r\n            displayMonuments.layout();\r\n            displayMonuments.setItems(masterData);\r\n\r\n            loadMonumentStatsToChart();\r\n        } catch (NumberFormatException e) {\r\n            showAlert(Alert.AlertType.ERROR, \"Input Error\", \"Please enter valid numeric values for Entry Price, Latitude, and Longitude.\");\r\n        } catch (SQLException e) {\r\n            showAlert(Alert.AlertType.ERROR, \"Database Error\", \"Error adding monument to the database: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n    public void refreshTableView() {\r\n        try {\r\n            loadData();\r\n        } catch (Exception e) {\r\n            e.printStackTrace(); // Handle or log the exception as needed\r\n        }\r\n    }\r\n    private boolean validateMonumentInput() {\r\n        // Check if all mandatory fields for monument are filled\r\n        if (countryComboBox.getValue() == null || typeComboBox.getValue() == null ||\r\n                statusComboBox.getValue() == null || MonumentnameField.getText().isEmpty() ||\r\n                descriptionField.getText().isEmpty() || entryPriceField.getText().isEmpty()) {\r\n            showAlert(Alert.AlertType.ERROR, \"Invalid input\", \"Please fill all mandatory fields for the monument.\");\r\n            return false;\r\n        }\r\n\r\n        // Check if entry price is a positive integer\r\n        if (!entryPriceField.getText().matches(\"\\\\d+\")) {\r\n            showAlert(Alert.AlertType.ERROR, \"Invalid input\", \"Entry Price must be a positive integer.\");\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n    private boolean validateInput() {\r\n        // Check if a country is selected\r\n        if (countryComboBox.getValue() == null) {\r\n            showAlert(Alert.AlertType.ERROR, \"Invalid input\", \"Please select a country.\");\r\n            return false;\r\n        }\r\n\r\n        // Check if a type is selected\r\n        if (typeComboBox.getValue() == null) {\r\n            showAlert(Alert.AlertType.ERROR, \"Invalid input\", \"Please select a type.\");\r\n            return false;\r\n        }\r\n\r\n        // Check if a status is selected\r\n        if (statusComboBox.getValue() == null) {\r\n            showAlert(Alert.AlertType.ERROR, \"Invalid input\", \"Please select a status.\");\r\n            return false;\r\n        }\r\n\r\n        // Check if name and description fields are empty\r\n        if (MonumentnameField.getText().isEmpty() || descriptionField.getText().isEmpty()) {\r\n            showAlert(Alert.AlertType.ERROR, \"Invalid input\", \"Name and Description fields cannot be empty.\");\r\n            return false;\r\n        }\r\n\r\n        // Check if entry price is a positive integer\r\n        if (!entryPriceField.getText().matches(\"\\\\d+\")) {\r\n            showAlert(Alert.AlertType.ERROR, \"Invalid input\", \"Entry Price must be a positive integer.\");\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    @FXML\r\n    public void deleteMonument() throws SQLException {\r\n        Monument selectedMonument = displayMonuments.getSelectionModel().getSelectedItem();\r\n        if (selectedMonument != null) {\r\n            try {\r\n                serviceMonument.delete(selectedMonument);\r\n                masterData.remove(selectedMonument); // Remove from the master data list\r\n                showAlert(Alert.AlertType.INFORMATION, \"Success\", \"Monument deleted successfully!\");\r\n            } catch (SQLException e) {\r\n                showAlert(Alert.AlertType.ERROR, \"Database Error\", \"Error deleting monument from the database.\");\r\n            }\r\n        } else {\r\n            showAlert(Alert.AlertType.WARNING, \"Selection Error\", \"Please select a monument to delete.\");\r\n        }\r\n\r\n        clearFields(); // Clear input fields after adding the monument\r\n        loadMonumentStatsToChart(); // Refresh chart data after adding\r\n\r\n    }\r\n\r\n\r\n    @FXML\r\n    public void updateMonument() throws SQLException {\r\n        Monument selectedMonument = displayMonuments.getSelectionModel().getSelectedItem();\r\n        if (selectedMonument != null) {\r\n            try {\r\n                // Validate input fields\r\n                if (validateMonumentInput()) {\r\n                   // int id = Integer.parseInt(idField.getText());\r\n                    String selectedCountryName = countryComboBox.getValue(); // Get the selected country name\r\n                    Country selectedCountry = serviceCountry.getCountryByName(selectedCountryName);\r\n\r\n                    String name = MonumentnameField.getText();\r\n                    String type = typeComboBox.getValue();\r\n                    int entryPrice = Integer.parseInt(entryPriceField.getText());\r\n                    String status = statusComboBox.getValue();\r\n                    String description = descriptionField.getText();\r\n                    double latitude = Double.parseDouble(latitudeField.getText());\r\n                    double longitude = Double.parseDouble(longitudeField.getText());\r\n\r\n                   // selectedMonument.setId(id);\r\n                    selectedMonument.setCountry(selectedCountry);\r\n                    selectedMonument.setName(name);\r\n                    selectedMonument.setType(type);\r\n                    selectedMonument.setEntryPrice(entryPrice);\r\n                    selectedMonument.setStatus(status);\r\n                    selectedMonument.setDescription(description);\r\n                    selectedMonument.setLatitude(latitude);\r\n                    selectedMonument.setLongitude(longitude);\r\n\r\n                    // Update the image path if a new image is selected\r\n                    if (!imagePath.equals(selectedMonument.getImagePath())) {\r\n                        selectedMonument.setImagePath(imagePath);\r\n                    }\r\n\r\n                    serviceMonument.update(selectedMonument);\r\n\r\n                    displayMonuments.refresh();\r\n\r\n                    showAlert(Alert.AlertType.INFORMATION, \"Success\", \"Monument updated successfully!\");\r\n                }\r\n            } catch (NumberFormatException e) {\r\n                showAlert(Alert.AlertType.ERROR, \"Invalid input\", \"Please enter valid numeric values for ID, Entry Price, Latitude, and Longitude.\");\r\n            } catch (SQLException e) {\r\n                showAlert(Alert.AlertType.ERROR, \"Database Error\", \"Error updating monument in the database.\");\r\n            }\r\n        } else {\r\n            showAlert(Alert.AlertType.WARNING, \"Selection Error\", \"Please select a monument to update.\");\r\n        }\r\n        clearFields(); // Clear input fields after updating the monument\r\n        loadMonumentStatsToChart(); // Refresh chart data after adding\r\n\r\n    }\r\n\r\n\r\n    private void clearFields() {\r\n        countryComboBox.getSelectionModel().clearSelection();\r\n        MonumentnameField.clear();\r\n        typeComboBox.getSelectionModel().clearSelection();\r\n        entryPriceField.clear();\r\n        statusComboBox.getSelectionModel().clearSelection();\r\n        descriptionField.clear();\r\n        latitudeField.clear();\r\n        longitudeField.clear();\r\n\r\n        // Load and set the default image\r\n        Image defaultImage = new Image(getClass().getResourceAsStream(\"/images/image.png\"));\r\n        imageViewMonument.setImage(defaultImage);\r\n    }\r\n\r\n\r\n    private void showAlert(Alert.AlertType type, String title, String message) {\r\n        Alert alert = new Alert(type);\r\n        alert.setTitle(title);\r\n        alert.setContentText(message);\r\n        alert.showAndWait();\r\n    }\r\n\r\n    @FXML\r\n    public void goToMonument(ActionEvent event) {\r\n        URL url = getClass().getResource(\"/com/test/tjv2/Monument.fxml\");\r\n        if (url == null) {\r\n            System.err.println(\"Cannot find Monument.fxml\");\r\n        } else {\r\n            try {\r\n                Parent root = FXMLLoader.load(url);\r\n                addButton.getScene().setRoot(root);\r\n            } catch (IOException ex) {\r\n                ex.printStackTrace(); // This prints the stack trace to help diagnose the issue\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    public void goToCountry(ActionEvent event) {\r\n        URL url = getClass().getResource(\"/com/test/tjv2/Country.fxml\");\r\n        if (url == null) {\r\n            System.err.println(\"Cannot find Monument.fxml\");\r\n        } else {\r\n            try {\r\n                Parent root = FXMLLoader.load(url);\r\n                addButton.getScene().setRoot(root);\r\n            } catch (IOException ex) {\r\n                ex.printStackTrace(); // This prints the stack trace to help diagnose the issue\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    public void Clearc(ActionEvent actionEvent) {\r\n        clearFields();;\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Controller/MonumentController.java b/src/main/java/Controller/MonumentController.java
--- a/src/main/java/Controller/MonumentController.java	
+++ b/src/main/java/Controller/MonumentController.java	
@@ -341,21 +341,33 @@
 
 
     private void setupSearchFilter() {
+        // Create a filtered list based on the master data
         FilteredList<Monument> filteredData = new FilteredList<>(masterData, p -> true);
+
+        // Add a listener to the search field's text property
         searchField.textProperty().addListener((observable, oldValue, newValue) -> {
+            // Update the predicate based on the new search value
             filteredData.setPredicate(monument -> {
                 if (newValue == null || newValue.isEmpty()) {
+                    // If the search field is empty, show all data
                     return true;
                 }
+                // Convert the search value to lowercase for case-insensitive matching
                 String lowerCaseFilter = newValue.toLowerCase();
+                // Check if the Monument name or type contains the search value
                 return monument.getName().toLowerCase().contains(lowerCaseFilter) ||
-                        monument.getType().toLowerCase().contains(lowerCaseFilter) ;
+                        monument.getType().toLowerCase().contains(lowerCaseFilter);
             });
         });
+
+        // Wrap the filtered list in a sorted list to enable sorting
         SortedList<Monument> sortedData = new SortedList<>(filteredData);
+        // Bind the comparator of the sorted list to the comparator of the TableView
         sortedData.comparatorProperty().bind(displayMonuments.comparatorProperty());
+        // Set the sorted data as the items of the TableView
         displayMonuments.setItems(sortedData);
     }
+
     @FXML
     void selectImageMonument() {
         FileChooser fileChooser = new FileChooser();
Index: src/main/resources/com/test/tjv2/MonumentDetails.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n\r\n<?import javafx.geometry.Insets?>\r\n<?import javafx.scene.control.Label?>\r\n<?import javafx.scene.image.Image?>\r\n<?import javafx.scene.image.ImageView?>\r\n<?import javafx.scene.layout.StackPane?>\r\n<?import javafx.scene.layout.VBox?>\r\n<?import javafx.scene.text.Text?>\r\n<?import javafx.scene.web.WebView?>\r\n\r\n<?import javafx.scene.control.Button?>\r\n<?import javafx.scene.text.TextFlow?>\r\n<?import java.net.URL?>\r\n<StackPane prefHeight=\"660.0\" prefWidth=\"942.0\" xmlns=\"http://javafx.com/javafx/21\" xmlns:fx=\"http://javafx.com/fxml/1\" fx:controller=\"Controller.MonumentDetailsController\">\r\n    <children>\r\n      <ImageView fitHeight=\"705.0\" fitWidth=\"1175.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\r\n         <image>\r\n            <Image url=\"@../../../images/background.png\" />\r\n         </image>\r\n      </ImageView>\r\n        <!-- Details VBox -->\r\n        <VBox fx:id=\"detailsBox\" alignment=\"TOP_LEFT\" layoutX=\"225\" layoutY=\"65\" maxHeight=\"700\" maxWidth=\"500\" prefHeight=\"629.0\" prefWidth=\"500.0\" spacing=\"10\" styleClass=\"details-box\" stylesheets=\"@Styles/Main.css\">\r\n            <children>\r\n                <Label styleClass=\"detail-label\" text=\"Name:\" />\r\n                <Text fx:id=\"nameText\" styleClass=\"detail-text\" />\r\n                <Label styleClass=\"detail-label\" text=\"Type:\" />\r\n                <Text fx:id=\"typeText\" styleClass=\"detail-text\" />\r\n                <Label styleClass=\"detail-label\" text=\"Entry Price:\" />\r\n                <Text fx:id=\"priceText\" styleClass=\"detail-text\" />\r\n                <Label styleClass=\"detail-label\" text=\"Status:\" />\r\n                <Text fx:id=\"statusText\" styleClass=\"detail-text\" />\r\n                <Label styleClass=\"detail-label\" text=\"Description:\" />\r\n                <TextFlow fx:id=\"descriptionFlow\" styleClass=\"detail-text\" prefWidth=\"460.0\">\r\n                    <Text fx:id=\"descriptionText\" style=\"-fx-fill: white;\"/>\r\n                </TextFlow>\r\n\r\n\r\n\r\n                <WebView fx:id=\"webView\" prefHeight=\"339.0\" prefWidth=\"460.0\" />\r\n            </children>\r\n            <VBox.margin>\r\n                <Insets bottom=\"20\" left=\"20\" right=\"20\" top=\"20\" />\r\n            </VBox.margin>\r\n        </VBox>\r\n\r\n    </children>\r\n    <stylesheets>\r\n        <URL value=\"@Styles/Main.css\" />\r\n    </stylesheets>\r\n</StackPane>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/com/test/tjv2/MonumentDetails.fxml b/src/main/resources/com/test/tjv2/MonumentDetails.fxml
--- a/src/main/resources/com/test/tjv2/MonumentDetails.fxml	
+++ b/src/main/resources/com/test/tjv2/MonumentDetails.fxml	
@@ -28,15 +28,16 @@
                 <Text fx:id="typeText" styleClass="detail-text" />
                 <Label styleClass="detail-label" text="Entry Price:" />
                 <Text fx:id="priceText" styleClass="detail-text" />
-                <Label styleClass="detail-label" text="Status:" />
-                <Text fx:id="statusText" styleClass="detail-text" />
+
                 <Label styleClass="detail-label" text="Description:" />
-                <TextFlow fx:id="descriptionFlow" styleClass="detail-text" prefWidth="460.0">
-                    <Text fx:id="descriptionText" style="-fx-fill: white;"/>
+                <TextFlow fx:id="descriptionFlow" styleClass="detail-text" prefWidth="460.0" style="-fx-text-fill: white;">
+                    <Text fx:id="descriptionText" style="-fx-fill: white; -fx-text-fill: white;"/>
                 </TextFlow>
 
 
 
+
+
                 <WebView fx:id="webView" prefHeight="339.0" prefWidth="460.0" />
             </children>
             <VBox.margin>
@@ -47,5 +48,7 @@
     </children>
     <stylesheets>
         <URL value="@Styles/Main.css" />
+        <URL value="@Styles/Monument.css" />
+
     </stylesheets>
 </StackPane>
Index: src/main/resources/com/test/tjv2/Home.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n\r\n<?import javafx.scene.control.Button?>\r\n<?import javafx.scene.control.ButtonBar?>\r\n<?import javafx.scene.control.Label?>\r\n<?import javafx.scene.image.Image?>\r\n<?import javafx.scene.image.ImageView?>\r\n<?import javafx.scene.layout.AnchorPane?>\r\n<?import javafx.scene.text.Font?>\r\n\r\n<?import java.net.URL?>\r\n<AnchorPane prefHeight=\"800.0\" prefWidth=\"1512.0\" xmlns=\"http://javafx.com/javafx/21\" xmlns:fx=\"http://javafx.com/fxml/1\" fx:controller=\"Controller.Home\">\r\n    <children>\r\n        <Label fx:id=\"idU\" layoutX=\"288.0\" layoutY=\"575.0\" text=\"Label\" textFill=\"WHITE\" />\r\n        <ImageView fitHeight=\"1011.0\" fitWidth=\"1538.0\" layoutY=\"-184.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\r\n            <image>\r\n                <Image url=\"@../../../images/bg1.jpg\" />\r\n            </image>\r\n        </ImageView>\r\n        <ImageView fitHeight=\"143.0\" fitWidth=\"303.0\" layoutX=\"34.0\" layoutY=\"-3.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\r\n            <image>\r\n                <Image url=\"@../../../images/tourjoy.png\" />\r\n            </image>\r\n        </ImageView>\r\n\r\n\r\n        <Label layoutX=\"1212.0\" layoutY=\"45.0\" prefHeight=\"26.0\" prefWidth=\"101.0\" text=\"FEEDBACK\" textFill=\"#230f6e\">\r\n            <font>\r\n                <Font name=\"System Bold\" size=\"17.0\" />\r\n            </font>\r\n        </Label>\r\n        <Label layoutX=\"1314.0\" layoutY=\"45.0\" text=\"CLAIMS\" textFill=\"#230f6e\">\r\n            <font>\r\n                <Font name=\"System Bold\" size=\"17.0\" />\r\n            </font>\r\n        </Label>\r\n\r\n        <ImageView fx:id=\"heroImageView\" fitHeight=\"556.0\" fitWidth=\"552.0\" layoutX=\"867.0\" layoutY=\"191.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\r\n            <image>\r\n                <Image url=\"@../../../images/globe.png\" />\r\n            </image>\r\n        </ImageView>\r\n        <Label layoutX=\"187.0\" layoutY=\"413.0\" text=\"Destinations!\" textFill=\"WHITE\">\r\n            <font>\r\n                <Font name=\"Britannic Bold\" size=\"74.0\" />\r\n            </font>\r\n        </Label>\r\n        <Label layoutX=\"173.0\" layoutY=\"324.0\" text=\"Discover Epic \" textFill=\"WHITE\">\r\n            <font>\r\n                <Font name=\"Britannic Bold\" size=\"74.0\" />\r\n            </font>\r\n        </Label>\r\n        <Button layoutX=\"238.0\" layoutY=\"569.0\" mnemonicParsing=\"false\" prefHeight=\"69.0\" prefWidth=\"300.0\" style=\"-fx-background-color: #fea116;\" text=\"CRAFT YOUR JOURNEY\" textFill=\"WHITE\">\r\n            <font>\r\n                <Font size=\"22.0\" />\r\n            </font>\r\n        </Button>\r\n        <ImageView fx:id=\"profileImageView\" fitHeight=\"56.0\" fitWidth=\"60.0\" layoutX=\"1419.0\" layoutY=\"30.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\r\n            <image>\r\n                <Image url=\"@../../../images/icons-utilisateur.png\" />\r\n            </image>\r\n        </ImageView>\r\n        <ButtonBar layoutX=\"382.0\" layoutY=\"139.0\" prefHeight=\"40.0\" prefWidth=\"200.0\" />\r\n        <Label layoutX=\"751.0\" layoutY=\"45.0\" text=\"HOME\" textFill=\"#fea116\">\r\n            <font>\r\n                <Font name=\"System Bold\" size=\"17.0\" />\r\n            </font>\r\n        </Label>\r\n        <!-- Guide Button -->\r\n        <Button fx:id=\"guideButton\" layoutX=\"957.0\" layoutY=\"39.0\" prefHeight=\"26.0\" prefWidth=\"86.0\" styleClass=\"custom-button\" text=\"GUIDES\" textFill=\"#230f6e\" />\r\n\r\n        <!-- Monument Button -->\r\n        <Button fx:id=\"MonumentButton\" layoutX=\"821.0\" layoutY=\"39.0\" prefHeight=\"38.0\" prefWidth=\"143.0\" styleClass=\"custom-button\" text=\"MONUMENTS\" textFill=\"#230f6e\" onAction=\"#goToMonuments\" />\r\n\r\n        <!-- Subscription Button -->\r\n        <Button fx:id=\"SubscriptionButton\" layoutX=\"1043.0\" layoutY=\"39.0\" prefHeight=\"38.0\" prefWidth=\"166.0\" styleClass=\"custom-button\" text=\"SUBSCRIPTION\" textFill=\"#230f6e\" />\r\n\r\n    </children>\r\n    <stylesheets>\r\n        <URL value=\"@Styles/Main.css\"/>\r\n    </stylesheets>\r\n</AnchorPane>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/com/test/tjv2/Home.fxml b/src/main/resources/com/test/tjv2/Home.fxml
--- a/src/main/resources/com/test/tjv2/Home.fxml	
+++ b/src/main/resources/com/test/tjv2/Home.fxml	
@@ -67,7 +67,7 @@
             </font>
         </Label>
         <!-- Guide Button -->
-        <Button fx:id="guideButton" layoutX="957.0" layoutY="39.0" prefHeight="26.0" prefWidth="86.0" styleClass="custom-button" text="GUIDES" textFill="#230f6e" />
+        <Button fx:id="guideButton" layoutX="957.0" layoutY="39.0" prefHeight="26.0" prefWidth="86.0" styleClass="custom-button" text="GUIDES" textFill="#230f6e" onAction="#goToGuides" />
 
         <!-- Monument Button -->
         <Button fx:id="MonumentButton" layoutX="821.0" layoutY="39.0" prefHeight="38.0" prefWidth="143.0" styleClass="custom-button" text="MONUMENTS" textFill="#230f6e" onAction="#goToMonuments" />
Index: src/main/resources/com/test/tjv2/Styles/Main.css
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/* main.css */\r\n\r\n/* Style for custom buttons */\r\n.custom-button {\r\n    -fx-background-color: transparent;\r\n    -fx-border: none;\r\n    -fx-cursor: hand; /* Change cursor to hand when hovering over the button */\r\n    -fx-font-family: \"System Bold\";\r\n    -fx-font-size: 17.0;\r\n    -fx-font-weight: bold; /* Make the text bold */\r\n}\r\n\r\n/* Style for custom buttons on hover */\r\n.custom-button:hover {\r\n    -fx-background-color: #f0f0f0; /* Change background color when hovering */\r\n    -fx-text-fill: #808080; /* Change text color when hovering */\r\n}\r\n\r\n.monument-box {\r\n    -fx-background-color: transparent;\r\n    -fx-border-color: #d0d0d0;\r\n    -fx-border-width: 0;\r\n    -fx-border-radius: 5;\r\n    -fx-effect: dropshadow(three-pass-box, rgba(0,0,0,0.1), 10, 0, 0, 10);\r\n\r\n    -fx-padding: 0;\r\n}\r\n\r\n.monument-image {\r\n    -fx-fit-to-width: true;\r\n    -fx-preserve-ratio: true;\r\n    -fx-background-radius: 5;\r\n    -fx-border-radius: 5;\r\n}\r\n\r\n.monument-details {\r\n    -fx-alignment: center;\r\n    -fx-padding: 10;\r\n}\r\n\r\n.monument-title {\r\n    -fx-font-size: 16px;\r\n    -fx-font-weight: bold;\r\n    -fx-text-fill: #333; /* Adjust the color to match your design */\r\n}\r\n\r\n.monument-button {\r\n    -fx-background-color: #000000;\r\n    -fx-text-fill: white;\r\n    -fx-background-radius: 5;\r\n    -fx-padding: 5 22;\r\n    -fx-font-weight: bold;\r\n}\r\n.scroll-pane {\r\n    -fx-background-color: transparent;\r\n    -fx-background: transparent;\r\n}\r\n\r\n.scroll-pane .viewport {\r\n    -fx-background-color: transparent;\r\n}\r\n.details-box {\r\n    -fx-background-color: rgba(0, 0, 0, 0.5); /* Semi-transparent black background */\r\n    -fx-padding: 20;\r\n    -fx-spacing: 10; /* Spacing between children nodes */\r\n    -fx-border-radius: 10;\r\n    -fx-background-radius: 10;\r\n}\r\n\r\n\r\n.label {\r\n    -fx-font-weight: bold;\r\n    -fx-text-fill: #000000;\r\n}\r\n\r\n.text {\r\n    -fx-fill: #000000;\r\n}\r\n\r\n.web-view {\r\n    -fx-effect: dropshadow(three-pass-box, rgba(0,0,0,0.8), 10, 0, 0, 10);\r\n}\r\n.detail-label {\r\n    -fx-text-fill: white; /* Sets the text color of the label to white */\r\n    -fx-font-size: 16px; /* You can adjust the size as needed */\r\n    -fx-font-weight: bold; /* This will make the label text bold */\r\n}\r\n\r\n\r\n.detail-text {\r\n    -fx-fill: white;  /* For SVGPath or shapes */\r\n    -fx-text-fill: white;  /* For Text nodes */\r\n    font-size: 16px;\r\n}\r\n\r\n.detail-text .text {  /* Ensures targeting Text nodes inside a TextFlow with specific class */\r\n    -fx-fill: white !important;\r\n}\r\n\r\n.text-flow .text {  /* Targeting Text nodes inside any TextFlow */\r\n    -fx-fill: white !important;\r\n}\r\n\r\n\r\n/* USA flag */\r\n\r\n/* EU flag */\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/com/test/tjv2/Styles/Main.css b/src/main/resources/com/test/tjv2/Styles/Main.css
--- a/src/main/resources/com/test/tjv2/Styles/Main.css	
+++ b/src/main/resources/com/test/tjv2/Styles/Main.css	
@@ -90,16 +90,21 @@
 .detail-text {
     -fx-fill: white;  /* For SVGPath or shapes */
     -fx-text-fill: white;  /* For Text nodes */
-    font-size: 16px;
+    font-size: 19px;
+}
+
+.text-flow, .text-flow .text {
+    -fx-fill: white !important;  /* Ensures that the fill color for text shapes is white */
+    -fx-text-fill: white !important;  /* Ensures that the text color is white */
 }
 
-.detail-text .text {  /* Ensures targeting Text nodes inside a TextFlow with specific class */
+/* Add specific targeting for description TextFlow */
+#descriptionFlow .text {
     -fx-fill: white !important;
+    -fx-text-fill: white !important;
 }
 
-.text-flow .text {  /* Targeting Text nodes inside any TextFlow */
-    -fx-fill: white !important;
-}
+
 
 
 /* USA flag */
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	
+++ b/.idea/vcs.xml	
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
Index: src/main/java/Controller/MonumentDetailsController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Controller;\r\n\r\nimport Entities.Monument;\r\nimport javafx.concurrent.Worker;\r\nimport javafx.fxml.FXML;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.image.ImageView;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.text.Text;\r\nimport javafx.scene.web.WebEngine;\r\nimport javafx.scene.web.WebView;\r\n\r\n\r\nimport javax.sound.sampled.AudioInputStream;\r\nimport java.net.URL;\r\nimport javafx.scene.text.TextFlow;\r\nimport javafx.scene.text.Text;\r\n\r\npublic class MonumentDetailsController {\r\n    public VBox detailsBox;\r\n    public ImageView backgroundImage;\r\n    public Button playDescriptionButton;\r\n    public Text descriptionText;\r\n    @FXML private Text nameText;\r\n    @FXML private Text typeText;\r\n    @FXML private Text priceText;\r\n    @FXML private Text statusText;\r\n    @FXML private TextFlow descriptionFlow;\r\n    @FXML private Text latitudeText;\r\n    @FXML private Text longitudeText;\r\n    @FXML private WebView webView;\r\n\r\n    public void initData(Monument monument) {\r\n        descriptionText.setText(monument.getDescription());\r\n        descriptionText.setStyle(\"-fx-fill: white;\"); // Set the text color directly\r\n        nameText.setText(monument.getName());\r\n        typeText.setText(monument.getType());\r\n        priceText.setText(String.valueOf(monument.getEntryPrice()));\r\n        statusText.setText(monument.getStatus());\r\n\r\n        // Reset previous texts and add new text\r\n        descriptionFlow.getChildren().clear();\r\n        Text descriptionContent = new Text(monument.getDescription());\r\n        descriptionFlow.getChildren().add(descriptionContent);\r\n\r\n        updateMapView(monument.getLatitude(), monument.getLongitude());\r\n    }\r\n\r\n    private void updateMapView(double latitude, double longitude) {\r\n        WebEngine webEngine = webView.getEngine();\r\n        webEngine.setJavaScriptEnabled(true);\r\n\r\n        webEngine.getLoadWorker().stateProperty().addListener((observable, oldValue, newValue) -> {\r\n            if (newValue == Worker.State.SUCCEEDED) {\r\n                webEngine.executeScript(\"updateMapView(\" + latitude + \", \" + longitude + \");\");\r\n            }\r\n        });\r\n\r\n        URL url = getClass().getResource(\"/com/test/tjv2/map.html\");\r\n        if (url != null) {\r\n            webEngine.load(url.toExternalForm());\r\n        } else {\r\n            System.err.println(\"Failed to find map.html resource.\");\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Controller/MonumentDetailsController.java b/src/main/java/Controller/MonumentDetailsController.java
--- a/src/main/java/Controller/MonumentDetailsController.java	
+++ b/src/main/java/Controller/MonumentDetailsController.java	
@@ -33,20 +33,29 @@
 
     public void initData(Monument monument) {
         descriptionText.setText(monument.getDescription());
-        descriptionText.setStyle("-fx-fill: white;"); // Set the text color directly
+        descriptionText.setFill(Color.WHITE); // Set the fill color to white
+        descriptionText.setStyle("-fx-text-fill: white; -fx-fill: white; -fx-font-size: 18px;"); // Set text size
+
         nameText.setText(monument.getName());
+        nameText.setStyle("-fx-font-size: 16px;");
         typeText.setText(monument.getType());
+        typeText.setStyle("-fx-font-size: 16px;");
         priceText.setText(String.valueOf(monument.getEntryPrice()));
-        statusText.setText(monument.getStatus());
+        priceText.setStyle("-fx-font-size: 16px;");
+       // statusText.setText(monument.getStatus());
+       // statusText.setStyle("-fx-font-size: 16px;");
 
-        // Reset previous texts and add new text
+        // Reset previous texts and add new text with updated style
         descriptionFlow.getChildren().clear();
         Text descriptionContent = new Text(monument.getDescription());
+        descriptionContent.setFill(Color.WHITE);
+        descriptionContent.setStyle("-fx-text-fill: white; -fx-fill: white; -fx-font-size: 18px;"); // Set text size
         descriptionFlow.getChildren().add(descriptionContent);
 
         updateMapView(monument.getLatitude(), monument.getLongitude());
     }
 
+
     private void updateMapView(double latitude, double longitude) {
         WebEngine webEngine = webView.getEngine();
         webEngine.setJavaScriptEnabled(true);
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\r\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\r\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n\r\n    <groupId>com.example</groupId>\r\n    <artifactId>helloapplication</artifactId>\r\n    <version>1.0-SNAPSHOT</version>\r\n    <name>helloapplication</name>\r\n\r\n    <properties>\r\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n        <junit.version>5.9.2</junit.version>\r\n    </properties>\r\n    <repositories>\r\n        <repository>\r\n            <id>mlt-mvn-releases-local</id>\r\n            <url>https://mlt.jfrog.io/artifactory/mlt-mvn-releases-local</url>\r\n        </repository>\r\n    </repositories>\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.openjfx</groupId>\r\n            <artifactId>javafx-controls</artifactId>\r\n            <version>17.0.6</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.openjfx</groupId>\r\n            <artifactId>javafx-fxml</artifactId>\r\n            <version>17.0.6</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.controlsfx</groupId>\r\n            <artifactId>controlsfx</artifactId>\r\n            <version>11.1.2</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>com.dlsc.formsfx</groupId>\r\n            <artifactId>formsfx-core</artifactId>\r\n            <version>11.6.0</version>\r\n            <exclusions>\r\n                <exclusion>\r\n                    <groupId>org.openjfx</groupId>\r\n                    <artifactId>*</artifactId>\r\n                </exclusion>\r\n            </exclusions>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.junit.jupiter</groupId>\r\n            <artifactId>junit-jupiter-api</artifactId>\r\n            <version>${junit.version}</version>\r\n            <scope>test</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.junit.jupiter</groupId>\r\n            <artifactId>junit-jupiter-engine</artifactId>\r\n            <version>${junit.version}</version>\r\n            <scope>test</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.apache.pdfbox</groupId>\r\n            <artifactId>pdfbox</artifactId>\r\n            <version>2.0.26</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>com.google.oauth-client</groupId>\r\n            <artifactId>google-oauth-client</artifactId>\r\n            <version>1.32.1</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>com.google.oauth-client</groupId>\r\n            <artifactId>google-oauth-client-java6</artifactId>\r\n            <version>1.32.1</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>com.google.oauth-client</groupId>\r\n            <artifactId>google-oauth-client-jetty</artifactId>\r\n            <version>1.32.1</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>com.stripe</groupId>\r\n            <artifactId>stripe-java</artifactId>\r\n            <version>22.2.0</version> <!-- Check for the latest version on Maven Central -->\r\n        </dependency>\r\n        <!-- Google API Client Library -->\r\n        <dependency>\r\n            <groupId>com.google.api-client</groupId>\r\n            <artifactId>google-api-client</artifactId>\r\n            <version>1.32.1</version> <!-- Make sure to check for the latest version -->\r\n        </dependency>\r\n\r\n        <!-- Google OAuth Client Library -->\r\n        <dependency>\r\n            <groupId>com.google.oauth-client</groupId>\r\n            <artifactId>google-oauth-client</artifactId>\r\n            <version>1.32.1</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>com.google.apis</groupId>\r\n            <artifactId>google-api-services-gmail</artifactId>\r\n            <version>v1-rev20220404-2.0.0</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>javax.mail</groupId>\r\n            <artifactId>mail</artifactId>\r\n            <version>1.4.7</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>mysql</groupId>\r\n            <artifactId>mysql-connector-java</artifactId>\r\n            <version>8.0.29</version> <!-- Check for the latest version -->\r\n        </dependency>\r\n\r\n\r\n\r\n\r\n<!-- ....................................dependencies koussay ..............................-->\r\n        <dependency>\r\n            <groupId>org.openjfx</groupId>\r\n            <artifactId>javafx-web</artifactId>\r\n            <version>17.0.6</version> <!-- Make sure to use a version that matches your JavaFX setup -->\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.glassfish</groupId>\r\n            <artifactId>jakarta.json</artifactId>\r\n            <version>2.0.1</version>\r\n            <scope>runtime</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.glassfish</groupId>\r\n            <artifactId>javax.json</artifactId>\r\n            <version>1.1.4</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.json</groupId>\r\n            <artifactId>json</artifactId>\r\n            <version>20210307</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.springframework.data</groupId>\r\n            <artifactId>spring-data-commons</artifactId>\r\n            <version>3.1.2</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>jakarta.json</groupId>\r\n            <artifactId>jakarta.json-api</artifactId>\r\n            <version>2.0.1</version>\r\n        </dependency>\r\n    </dependencies>\r\n\r\n    <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.apache.maven.plugins</groupId>\r\n                <artifactId>maven-compiler-plugin</artifactId>\r\n                <version>3.11.0</version>\r\n                <configuration>\r\n                    <source>17</source>\r\n                    <target>17</target>\r\n                </configuration>\r\n            </plugin>\r\n            <plugin>\r\n                <groupId>org.openjfx</groupId>\r\n                <artifactId>javafx-maven-plugin</artifactId>\r\n                <version>0.0.8</version>\r\n                <executions>\r\n                    <execution>\r\n                        <!-- Default configuration for running with: mvn clean javafx:run -->\r\n                        <id>default-cli</id>\r\n                        <configuration>\r\n                            <mainClass>com.example.helloapplication/com.example.helloapplication.HelloApplication\r\n                            </mainClass>\r\n                            <launcher>app</launcher>\r\n                            <jlinkZipName>app</jlinkZipName>\r\n                            <jlinkImageName>app</jlinkImageName>\r\n                            <noManPages>true</noManPages>\r\n                            <stripDebug>true</stripDebug>\r\n                            <noHeaderFiles>true</noHeaderFiles>\r\n                        </configuration>\r\n                    </execution>\r\n                </executions>\r\n            </plugin>\r\n        </plugins>\r\n    </build>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pom.xml b/pom.xml
--- a/pom.xml	
+++ b/pom.xml	
@@ -63,6 +63,12 @@
             <artifactId>pdfbox</artifactId>
             <version>2.0.26</version>
         </dependency>
+        <dependency>
+            <groupId>org.apache.pdfbox</groupId>
+            <artifactId>fontbox</artifactId>
+            <version>2.0.26</version>
+        </dependency>
+
         <dependency>
             <groupId>com.google.oauth-client</groupId>
             <artifactId>google-oauth-client</artifactId>
Index: src/main/resources/com/test/tjv2/map.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <meta charset='utf-8' />\r\n    <title>Leaflet Map</title>\r\n    <meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' />\r\n    <link rel='stylesheet' href='https://unpkg.com/leaflet/dist/leaflet.css' />\r\n    <style>\r\n        body { margin: 0; padding: 0; }\r\n        #map { position: absolute; top: 0; bottom: 0; width: 100%; }\r\n    </style>\r\n</head>\r\n<body>\r\n<div id='map'></div>\r\n<script src='https://unpkg.com/leaflet/dist/leaflet.js'></script>\r\n<script>\r\n    var map = L.map('map').setView([0, 0], 2); // Center map at [0, 0] with zoom level 2\r\n    L.tileLayer('https://api.mapbox.com/styles/v1/mapbox/satellite-v9/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoiZWxhZGtoaWwiLCJhIjoiY2x0NXZjanV1MDRpZTJpcXVxdG4wbjhxaiJ9.pP8R4CB8yQu8VBWaNSKmPQ', {\r\n        maxZoom: 18,\r\n        tileSize: 512,\r\n        zoomOffset: -1,\r\n        accessToken: 'pk.eyJ1IjoiZWxhZGtoaWwiLCJhIjoiY2x0NXZjanV1MDRpZTJpcXVxdG4wbjhxaiJ9.pP8R4CB8yQu8VBWaNSKmPQ'\r\n    }).addTo(map);\r\n\r\n    function addMarker(latitude, longitude) {\r\n        L.marker([latitude, longitude]).addTo(map);\r\n    }\r\n\r\n    function updateMapView(latitude, longitude) {\r\n        map.setView([latitude, longitude], 17); // Set map center and zoom level\r\n        addMarker(latitude, longitude);\r\n    }\r\n    updateMapView(latitude, longitude); // Update map view to show a marker at specified latitude and longitude\r\n</script>\r\n</body>\r\n</html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/com/test/tjv2/map.html b/src/main/resources/com/test/tjv2/map.html
--- a/src/main/resources/com/test/tjv2/map.html	
+++ b/src/main/resources/com/test/tjv2/map.html	
@@ -15,11 +15,11 @@
 <script src='https://unpkg.com/leaflet/dist/leaflet.js'></script>
 <script>
     var map = L.map('map').setView([0, 0], 2); // Center map at [0, 0] with zoom level 2
-    L.tileLayer('https://api.mapbox.com/styles/v1/mapbox/satellite-v9/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoiZWxhZGtoaWwiLCJhIjoiY2x0NXZjanV1MDRpZTJpcXVxdG4wbjhxaiJ9.pP8R4CB8yQu8VBWaNSKmPQ', {
+    L.tileLayer('https://api.mapbox.com/styles/v1/mapbox/satellite-v9/tiles/{z}/{x}/{y}?access_token=pk.eyJ1Ijoia291c3NheWJlbmhhZGpzYWxlbTEwIiwiYSI6ImNsdnNzbWFsdzEzOXYya21oZ2xwbWtsaDEifQ.oAe7fLi_u1AclfevS8keVQ', {
         maxZoom: 18,
         tileSize: 512,
         zoomOffset: -1,
-        accessToken: 'pk.eyJ1IjoiZWxhZGtoaWwiLCJhIjoiY2x0NXZjanV1MDRpZTJpcXVxdG4wbjhxaiJ9.pP8R4CB8yQu8VBWaNSKmPQ'
+        accessToken: 'pk.eyJ1Ijoia291c3NheWJlbmhhZGpzYWxlbTEwIiwiYSI6ImNsdnNzbWFsdzEzOXYya21oZ2xwbWtsaDEifQ.oAe7fLi_u1AclfevS8keVQ'
     }).addTo(map);
 
     function addMarker(latitude, longitude) {
